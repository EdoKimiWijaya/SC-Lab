# -*- coding: utf-8 -*-
"""2702231110 - Edo Kimi WIjaya - Difference.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1I9ZpAhM-Q2P8kCrGbRwlN0R_DZMTHHty
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import matplotlib.pyplot as plt
plt.style.use('seaborn-poster')
# %matplotlib inline

# step size
h = 0.1
# define grid
x = np.arange(0, 2*np.pi, h)
# compute function
y = np.cos(x)

#compute vector of forward differences
forward_diff = np.diff(y) / h
#compute corresponding grid
x_diff = x[:-1:]
#compute exact solution
exact_solution = -np.sin(x_diff)

#Plot Solution
plt.figure(figsize = (12, 8))
plt.plot(x_diff, forward_diff, '--', \
         label = 'Finite difference approximation')
plt.plot(x_diff, exact_solution, \
         label = 'Exact solution')
plt.legend()
plt.show()

#compute max error between
#numerical derivative and exact solution
max_error = max(abs(exact_solution - forward_diff))
print(max_error)

x_values = np.array([0, 0.1, 0.2, 0.3, 0.4])
f_values = np.array([0, 0.0819, 0.1341, 0.1646, 0.1797])

# Compute forward difference at x = 0
f_prime_0 = (f_values[1] - f_values[0]) / (x_values[1] - x_values[0])
print("f'(0) =", f_prime_0)

# Compute central difference at x = 0.2
f_prime_02 = (f_values[3] - f_values[1]) / (x_values[3] - x_values[1])
print("f'(0.2) =", f_prime_02)

"""QUIZ

compute f'(x) at x = 0 and 0.2

give the evenly spaced data points

x   |   0   |       0.1       |      0.2      |      0.3       |      0.4
f(x)|   0   |     0.0819      |     0.1341    |    0.1646      |     0.1797
"""

import numpy as np
import matplotlib.pyplot as plt
plt.style.use('seaborn-poster')

# Define given data points
x = np.array([0, 0.1, 0.2, 0.3, 0.4])
y = np.array([0.0000, 0.0819, 0.1341, 0.1646, 0.1797])

h = 0.1

# Compute vector of forward differences
forward_diff = np.diff(y) / h

# Compute corresponding grid for differences
x_diff = x[:-1]

# Plot solution
plt.figure(figsize=(12, 8))
plt.plot(x_diff, forward_diff, '--', label='Finite difference approximation')
plt.xlabel('x')
plt.ylabel("f'(x)")
plt.title('Finite Difference Approximation')
plt.legend()
plt.show()

# Compute forward difference at x = 0
f_prime_0 = (y[1] - y[0]) / (x[1] - x[0])
print("f'(0) =", f_prime_0)

# Compute central difference at x = 0.2
f_prime_02 = (y[3] - y[1]) / (x[3] - x[1])
print("f'(0.2) =", f_prime_02)